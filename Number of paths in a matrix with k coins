class Solution {
public:
    int dfs(vector<vector<int>> &arr, int n, int i, int j, int k, vector<vector<vector<int>>>& mp) {
        if(k <= 0)
            return 0;
        // check if valid index, only 2 dirs
        if(i >=n || j >=n)
            return 0;
        
        if(i == n-1 && j == n-1) {
            // used up exactly k coins, note : i,j must be valid and rightmost corner
            if(k == arr[i][j])  {
                return 1;
            }
            return 0;
        }
        if(mp[i][j][k]!=-1)
            return mp[i][j][k];
        
        // valid block explore neighbors
        mp[i][j][k] = dfs(arr, n, i+1, j, k-arr[i][j], mp) + dfs(arr, n, i, j+1, k-arr[i][j], mp);
        return mp[i][j][k];
   
    }
    long long numberOfPath(int n, int k, vector<vector<int>> &arr){
        // problem sets starting point as (0,0), no need worry about that.
        vector<vector<vector<int>>> mp(n, (vector<vector<int>> (n, (vector<int> (k+1, -1)))));
        return dfs(arr, n, 0, 0, k, mp);
    }
};
